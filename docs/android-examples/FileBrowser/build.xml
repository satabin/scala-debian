<?xml version="1.0" ?>
<project name="AndroidFileBrowser" default="package">
    <property name="sdk-folder" value="/home/linuxsoft/apps/android-m3-rc37a" />
    <property name="android-tools" value="/home/linuxsoft/apps/android-m3-rc37a/tools" />

    <!-- The intermediates directory -->
    <!-- Eclipse uses "bin" for its own output, so we do the same. -->
    <property name="outdir" value="bin" />

    <!-- No user servicable parts below. -->

    <!-- Input directories -->
    <property name="resource-dir" value="res" />
    <property name="asset-dir" value="assets" />
    <property name="srcdir" value="src" />

    <!-- Output directories -->
    <property name="outdir-classes" value="${outdir}/classes" />

    <!-- Create R.java in the source directory -->
    <property name="outdir-r" value="src" />

    <!-- Intermediate files -->
    <property name="dex-file" value="classes.dex" />
    <property name="intermediate-dex" value="${outdir}/${dex-file}" />

    <!-- The final package file to generate -->
    <property name="out-package" value="${outdir}/${ant.project.name}.apk" />

    <!-- Tools -->
    <property name="aapt" value="${android-tools}/aapt" />
    <property name="aidl" value="${android-tools}/aidl" />
    <property name="dx" value="${android-tools}/dx" />
    <property name="zip" value="zip" />
    <property name="android-jar" value="${sdk-folder}/android.jar" />

    <!-- Scala -->
    <property environment="env"/>
    <property name="scala.dir" value="${env.SCALA_HOME}"/>
    <property name="scala-compiler.jar" value="${scala.dir}/lib/scala-compiler.jar"/>
    <property name="scala-library.jar" value="${scala.dir}/lib/scala-library.jar"/>
    <property name="scala-android.jar" value="${scala.dir}/lib/scala-android.jar"/>
    <fail message="Missing library scala-android.jar (use sbaz to install it)">
      <condition><not><available file="${scala-android.jar}"/></not></condition>
    </fail>
    <property name="scala-depend.jar" value="${android-tools}/lib/scala-depend.jar"/>
    <path id="scala.path">
        <pathelement path="${scala-library.jar}"/>
        <pathelement path="${scala-compiler.jar}"/>
    </path>
    <path id="scalac.path">
        <pathelement path="${android-jar}"/>
        <pathelement path="${scala-library.jar}"/>
    </path>
    <taskdef
        resource="scala/tools/ant/antlib.xml"
        classpathref="scala.path"
    />
    <macrodef name="smartjar">
        <attribute name="srcdir"/>
        <attribute name="basedir"/>
        <attribute name="classname"/>
        <attribute name="destfile"/>
        <sequential>
          <depend
            srcdir="@{srcdir}"
            destdir="@{basedir}" closure="true"
            cache="@{basedir}"
            classpath="${android-jar}"
          />
          <java
             classname="ch.epfl.lamp.util.depend" output="@{basedir}/classes.dep"
             classpath="${scala-library.jar}${path.separator}${scala-depend.jar}">
            <arg line="@{basedir}${file.separator}dependencies.txt"/>
            <arg line="@{classname}"/>
          </java>
          <jar
            destfile="@{destfile}"
            basedir="@{basedir}"
            includesfile="@{basedir}/classes.dep"
           />
        </sequential>
    </macrodef>

    <!-- Rules -->

    <!-- Create the output directories if they don't exist yet. -->
    <target name="dirs">
        <mkdir dir="${outdir}" />
        <mkdir dir="${outdir-classes}" />
    </target>

    <!-- Generate the R.java file for this project's resources. -->
    <target name="resource-src" depends="dirs">
        <echo>Generating R.java...</echo>
        <exec executable="${aapt}" failonerror="true">
            <arg value="compile" />
            <arg value="-m" />
            <arg value="-J" />
            <arg value="${outdir-r}" />
            <arg value="-M" />
            <arg value="AndroidManifest.xml" />
            <arg value="-S" />
            <arg value="${resource-dir}" />
            <arg value="-I" />
            <arg value="${android-jar}" />
        </exec>
    </target>

    <!-- Generate java classes from .aidl files. -->
    <target name="aidl" depends="dirs">
        <apply executable="${aidl}" failonerror="true">
            <fileset dir="${srcdir}">
                <include name="**/*.aidl"/>
            </fileset>
        </apply>
    </target>

    <!-- Compile this project's .java files into .class files. -->
    <target name="compile" depends="dirs, resource-src, aidl">
        <javac encoding="ascii" target="1.5" debug="true" extdirs=""
                srcdir="."
                destdir="${outdir-classes}"
                bootclasspath="${android-jar}" />
        <scalac encoding="ascii" target="jvm-1.5"
            srcdir="${srcdir}"
            destdir="${outdir-classes}"
            bootclasspathref="scalac.path" />
        <unjar src="${scala-android.jar}" dest="${outdir-classes}"/>
        <smartjar
          srcdir="${srcdir}"
          basedir="${outdir-classes}"
          classname="org.anddev.android.filebrowser.AndroidFileBrowser"
          destfile="${outdir}/${ant.project.name}.jar"
        />
        <delete includeemptydirs="true">
          <fileset dir="${outdir-classes}" includes="**/*"/>
        </delete>
        <unjar src="${outdir}/${ant.project.name}.jar" dest="${outdir-classes}"/>
    </target>

    <!-- Convert this project's .class files into .dex files. -->
    <target name="dex" depends="compile">
        <exec executable="${dx}" failonerror="true">
            <arg value="-JXmx384M" />
            <arg value="--dex" />
            <arg value="--output=${intermediate-dex}" />
            <arg value="--locals=full" />
            <arg value="--positions=lines" />
            <arg path="${outdir-classes}" />
        </exec>
    </target>

    <!-- Put the project's resources into the output package file. -->
    <target name="package-res-and-assets">
        <echo>Packaging resources and assets...</echo>
        <exec executable="${aapt}" failonerror="true">
            <arg value="package" />
            <arg value="-f" />
            <arg value="-c" />
            <arg value="-M" />
            <arg value="AndroidManifest.xml" />
            <arg value="-S" />
            <arg value="${resource-dir}" />
            <arg value="-A" />
            <arg value="${asset-dir}" />
            <arg value="-I" />
            <arg value="${android-jar}" />
            <arg value="${out-package}" />
        </exec>
    </target>

    <!-- Same as package-res-and-assets, but without "-A ${asset-dir}" -->
    <target name="package-res-no-assets">
        <echo>Packaging resources...</echo>
        <exec executable="${aapt}" failonerror="true">
            <arg value="package" />
            <arg value="-f" />
            <arg value="-c" />
            <arg value="-M" />
            <arg value="AndroidManifest.xml" />
            <arg value="-S" />
            <arg value="${resource-dir}" />
            <!-- No assets directory -->
            <arg value="-I" />
            <arg value="${android-jar}" />
            <arg value="${out-package}" />
        </exec>
    </target>

    <!-- Invoke the proper target depending on whether or not
         an assets directory is present. -->
    <!-- TODO: find a nicer way to include the "-A ${asset-dir}" argument
         only when the assets dir exists. -->
    <target name="package-res">
        <available file="${asset-dir}" type="dir"
                property="res-target" value="and-assets" />
        <property name="res-target" value="no-assets" />
        <antcall target="package-res-${res-target}" />
    </target>

    <!-- Put the project's .class files into the output package file. -->
    <target name="package-java" depends="compile, package-res">
        <echo>Packaging java...</echo>
        <jar destfile="${out-package}"
                basedir="${outdir-classes}"
                update="true" />
    </target>

    <!-- Put the project's .dex files into the output package file. -->
    <target name="package-dex" depends="dex, package-res">
        <echo>Packaging dex...</echo>
        <exec executable="${zip}" failonerror="true">
            <arg value="-qj" />
            <arg value="${out-package}" />
            <arg value="${intermediate-dex}" />
        </exec>
    </target>

    <!-- Create the package file for this project from the sources. -->
    <target name="package" depends="package-dex" />
</project>
