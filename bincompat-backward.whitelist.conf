filter {
    packages = [
     "scala.reflect.internal"
    ]
    problems=[
        # Scala library
        {
            # can only be called from Stream::distinct, which cannot itself be inlined, so distinct is the only feasible call-site
            matchName="scala.collection.immutable.Stream.scala$collection$immutable$Stream$$loop$4"
            problemName=MissingMethodProblem
        },
        {
            # can only be called from Stream::distinct, which cannot itself be inlined, so distinct is the only feasible call-site
            matchName="scala.collection.immutable.Stream.scala$collection$immutable$Stream$$loop$5"
            problemName=MissingMethodProblem
        },
        # {
        #     # private[scala]
        #     matchName="scala.collection.immutable.ListSerializeStart$"
        #     problemName=MissingClassProblem
        # },
        # {
        #     # private[scala]
        #     matchName="scala.collection.immutable.ListSerializeStart"
        #     problemName=MissingClassProblem
        # },
        {
            # private nested class became private top-level class to fix SI-7018
            matchName="scala.reflect.macros.Attachments$NonemptyAttachments"
            problemName=MissingClassProblem
        },

        # scala.reflect.runtime
        # {
        #     matchName="scala.reflect.runtime.JavaUniverse.createClassModule"
        #     problemName=MissingMethodProblem
        # },
        # {
        #     matchName="scala.reflect.runtime.JavaUniverse.initClassModule"
        #     problemName=MissingMethodProblem
        # },
        # {
        #     matchName="scala.reflect.runtime.SymbolLoaders.createClassModule"
        #     problemName=MissingMethodProblem
        # },
        # {
        #     matchName="scala.reflect.runtime.SymbolLoaders.initClassModule"
        #     problemName=MissingMethodProblem
        # },
        # {
        #     matchName="scala.reflect.runtime.SymbolLoaders.initClassAndModule"
        #     problemName=MissingMethodProblem
        # },
        # {
        #     matchName="scala.reflect.runtime.SymbolLoaders.initAndEnterClassAndModule"
        #     problemName=MissingMethodProblem
        # },
        # {
        #     matchName="scala.reflect.runtime.JavaMirrors#JavaMirror.scala$reflect$runtime$JavaMirrors$JavaMirror$$jclassAsScala"
        #     problemName=MissingMethodProblem
        # },
        # {
        #     matchName="scala.reflect.runtime.JavaMirrors#JavaMirror.scala$reflect$runtime$JavaMirrors$JavaMirror$$jclassAsScala"
        #     problemName=IncompatibleResultTypeProblem
        # },

        # scala.concurrent.forkjoin (SI-7442)
        {
            matchName="scala.concurrent.forkjoin.ForkJoinTask.internalGetCompleter"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.concurrent.forkjoin.ForkJoinPool.registerWorker"
            problemName=IncompatibleMethTypeProblem
        },
        {
            matchName="scala.concurrent.forkjoin.ForkJoinPool.nextWorkerName"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.concurrent.forkjoin.ForkJoinPool.signalWork"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.concurrent.forkjoin.ForkJoinPool.idlePerActive"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.concurrent.forkjoin.ForkJoinPool.tryCompensate"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.concurrent.forkjoin.ForkJoinPool.helpJoinOnce"
            problemName=IncompatibleResultTypeProblem
        },
        {
            matchName="scala.reflect.runtime.JavaUniverse.isInvalidClassName"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.runtime.SymbolLoaders.isInvalidClassName"
            problemName=MissingMethodProblem
        }
    ]
}
