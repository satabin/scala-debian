filter {
    packages = [
     "scala.reflect.internal"
    ]
    problems=[
        # rework d526f8bd74 to duplicate tailImpl as a private method
        # {
        #     matchName="scala.collection.mutable.MutableList.tailImpl"
        #     problemName=MissingMethodProblem
        # },
        {
            # can only be called from Stream::distinct, which cannot itself be inlined, so distinct is the only feasible call-site
            matchName="scala.collection.immutable.Stream.scala$collection$immutable$Stream$$loop$6"
            problemName=MissingMethodProblem
        },
        {
            # can only be called from Stream::distinct, which cannot itself be inlined, so distinct is the only feasible call-site
            matchName="scala.collection.immutable.Stream.scala$collection$immutable$Stream$$loop$4"
            problemName=MissingMethodProblem
        },
        {
            # can only be called from Stream::distinct, which cannot itself be inlined, so distinct is the only feasible call-site
            matchName="scala.collection.immutable.Stream.scala$collection$immutable$Stream$$loop$5"
            problemName=MissingMethodProblem
        },
        # TODO: revert a557a97360: bridge method appeared because result is now Int but the super-method's result type erases to Object
        # {
        #     matchName="scala.collection.immutable.Range.head"
        #     problemName=IncompatibleResultTypeProblem
        # },
        # revert 0b92073a38 2aa66bec86: SI-4664 [Make scala.util.Random Serializable] Add test case
        # {
        #     matchName="scala.util.Random"
        #     problemName=MissingTypesProblem
        # },
        # {
        #     matchName="scala.util.Random$"
        #     problemName=MissingTypesProblem
        # },
        # {
        #     # private[concurrent]
        #     matchName="scala.concurrent.BatchingExecutor$Batch"
        #     problemName=MissingClassProblem
        # },
        # {
        #     # private[concurrent]
        #     matchName="scala.concurrent.BatchingExecutor"
        #     problemName=MissingClassProblem
        # },
        # {
        #     # private[concurrent]
        #     matchName="scala.concurrent.impl.ExecutionContextImpl$AdaptedForkJoinTask"
        #     problemName=MissingClassProblem
        # },
        # {
        #     # private[concurrent]
        #     matchName="scala.concurrent.impl.ExecutionContextImpl.scala$concurrent$impl$ExecutionContextImpl$$uncaughtExceptionHandler"
        #     problemName=MissingMethodProblem
        # },
        {
            # private nested class became private top-level class to fix SI-7018
            matchName="scala.reflect.macros.NonemptyAttachments"
            problemName=MissingClassProblem
        },

        # scala.reflect.runtime
        # {
        #     matchName="scala.reflect.runtime.JavaMirrors#JavaMirror.scala$reflect$runtime$JavaMirrors$JavaMirror$$jclassAsScala"
        #     problemName=IncompatibleResultTypeProblem
        # },
        # {
        #     matchName="scala.reflect.runtime.JavaMirrors#JavaMirror.scala$reflect$runtime$JavaMirrors$JavaMirror$$jclassAsScala1"
        #     problemName=MissingMethodProblem
        # },
        # {
        #     matchName="scala.reflect.runtime.SymbolLoaders.initClassAndModule"
        #     problemName=MissingMethodProblem
        # },
        # {
        #     matchName="scala.reflect.runtime.SymbolLoaders.initAndEnterClassAndModule"
        #     problemName=MissingMethodProblem
        # },
        # {
        #     matchName="scala.reflect.runtime.SymbolLoaders.createClassModule"
        #     problemName=MissingMethodProblem
        # },
        # {
        #     matchName="scala.reflect.runtime.SymbolLoaders.initClassModule"
        #     problemName=MissingMethodProblem
        # },
        # {
        #     matchName="scala.reflect.runtime.JavaUniverse"
        #     problemName=MissingTypesProblem
        # },
        # {
        #     matchName="scala.reflect.runtime.JavaUniverse.initClassAndModule"
        #     problemName=MissingMethodProblem
        # },
        # {
        #     matchName="scala.reflect.runtime.JavaUniverse.initAndEnterClassAndModule"
        #     problemName=MissingMethodProblem
        # },

        # scala.concurrent.forkjoin (SI-7442)
        {
             matchName="scala.concurrent.forkjoin.ForkJoinPool.registerWorker"
             problemName=IncompatibleMethTypeProblem
        },
        {
             matchName="scala.concurrent.forkjoin.ForkJoinPool.externalPush"
             problemName=MissingMethodProblem
        },
        {
             matchName="scala.concurrent.forkjoin.ForkJoinPool.this"
             problemName=IncompatibleMethTypeProblem
        },
        {
             matchName="scala.concurrent.forkjoin.ForkJoinPool.signalWork"
             problemName=MissingMethodProblem
        },
        {
             matchName="scala.concurrent.forkjoin.ForkJoinPool.awaitQuiescence"
             problemName=MissingMethodProblem
        },
        {
             matchName="scala.concurrent.forkjoin.ForkJoinPool.tryCompensate"
             problemName=MissingMethodProblem
        },
        {
             matchName="scala.concurrent.forkjoin.ForkJoinTask.recordExceptionalCompletion"
             problemName=MissingMethodProblem
        },
        {
             matchName="scala.concurrent.forkjoin.ForkJoinTask.internalPropagateException"
             problemName=MissingMethodProblem
        },
        {
             matchName="scala.concurrent.forkjoin.ForkJoinPool.helpJoinOnce"
             problemName=IncompatibleResultTypeProblem
        },
        {
             matchName="scala.concurrent.impl.Promise$CompletionLatch"
             problemName=MissingClassProblem
        },
        {
            matchName="scala.concurrent.impl.Promise#DefaultPromise.linkRootOf"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.concurrent.impl.Promise#DefaultPromise.scala$concurrent$impl$Promise$DefaultPromise$$dispatchOrAddCallback"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.runtime.JavaMirrors#JavaMirror#FromJavaClassCompleter.scala$reflect$runtime$JavaMirrors$JavaMirror$FromJavaClassCompleter$$enterEmptyCtorIfNecessary$1"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.runtime.ReflectionUtils.scalacShouldntLoadClass"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.runtime.ReflectionUtils.scalacShouldntLoadClassfile"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.runtime.ReflectionUtils.isTraitImplementation"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.runtime.JavaMirrors#JavaMirror.scala$reflect$runtime$JavaMirrors$JavaMirror$$PackageAndClassPattern"
            problemName=MissingMethodProblem
        },
        {
            matchName="scala.reflect.runtime.SymbolLoaders.isInvalidClassName"
            problemName=MissingMethodProblem
        }
    ]
}
